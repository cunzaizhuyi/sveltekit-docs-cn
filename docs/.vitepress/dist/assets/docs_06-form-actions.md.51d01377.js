import{_ as s,c as n,o as a,a as l}from"./app.62ad7953.js";const A=JSON.parse('{"title":"Form Actions","description":"","frontmatter":{"title":"Form Actions"},"headers":[{"level":3,"title":"Default actions","slug":"default-actions","link":"#default-actions","children":[]},{"level":3,"title":"Named actions","slug":"named-actions","link":"#named-actions","children":[]},{"level":3,"title":"Anatomy of an action","slug":"anatomy-of-an-action","link":"#anatomy-of-an-action","children":[]},{"level":3,"title":"Progressive enhancement","slug":"progressive-enhancement","link":"#progressive-enhancement","children":[]},{"level":3,"title":"Alternatives","slug":"alternatives","link":"#alternatives","children":[]}],"relativePath":"docs/06-form-actions.md"}'),o={name:"docs/06-form-actions.md"},e=l(`<p>A <code>+page.server.js</code> file can export <em>actions</em>, which allow you to <code>POST</code> data to the server using the <code>&lt;form&gt;</code> element.</p><p>When using <code>&lt;form&gt;</code>, client-side JavaScript is optional, but you can easily <em>progressively enhance</em> your form interactions with JavaScript to provide the best user experience.</p><h3 id="default-actions" tabindex="-1">Default actions <a class="header-anchor" href="#default-actions" aria-hidden="true">#</a></h3><p>In the simplest case, a page declares a <code>default</code> action:</p><div class="language-js"><button class="copy"></button><span class="lang">js</span><pre><code><span class="line"><span style="color:#676E95;">/// file: src/routes/login/+page.server.js</span></span>
<span class="line"><span style="color:#676E95;">/** </span><span style="color:#89DDFF;">@</span><span style="color:#C792EA;">type</span><span style="color:#676E95;"> </span><span style="color:#89DDFF;">{</span><span style="color:#FFCB6B;">import(&#39;./$types&#39;).Actions</span><span style="color:#89DDFF;">}</span><span style="color:#676E95;"> */</span></span>
<span class="line"><span style="color:#89DDFF;">export</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> actions </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#82AAFF;">default</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">async</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">event</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">		</span><span style="color:#676E95;">// TODO log the user in</span></span>
<span class="line"><span style="color:#F07178;">	</span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">};</span></span>
<span class="line"></span></code></pre></div><p>To invoke this action from the <code>/login</code> page, just add a <code>&lt;form&gt;</code> \u2014 no JavaScript needed:</p><div class="language-svelte"><button class="copy"></button><span class="lang">svelte</span><pre><code><span class="line"><span style="color:#A6ACCD;">/// file: src/routes/login/+page.svelte</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">form</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">method</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">POST</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">input</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">name</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">email</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">type</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">email</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">input</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">name</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">password</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">type</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">password</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">button</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;">Log in</span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">button</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">form</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"></span></code></pre></div><p>If someone were to click the button, the browser would send the form data via <code>POST</code> request to the server, running the default action.</p><blockquote><p>Actions always use <code>POST</code> requests, since <code>GET</code> requests should never have side-effects.</p></blockquote><p>We can also invoke the action from other pages (for example if there&#39;s a login widget in the nav in the root layout) by adding the <code>action</code> attribute, pointing to the page:</p><div class="language-html"><button class="copy"></button><span class="lang">html</span><pre><code><span class="line"><span style="color:#A6ACCD;">/// file: src/routes/+layout.svelte</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">form</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">method</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">POST</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">action</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">/login</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#676E95;">&lt;!-- content --&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">form</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"></span></code></pre></div><h3 id="named-actions" tabindex="-1">Named actions <a class="header-anchor" href="#named-actions" aria-hidden="true">#</a></h3><p>Instead of one <code>default</code> action, a page can have as many named actions as it needs:</p><div class="language-diff"><button class="copy"></button><span class="lang">diff</span><pre><code><span class="line"><span style="color:#A6ACCD;">/// file: src/routes/login/+page.server.js</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">/** @type {import(&#39;./$types&#39;).Actions} */</span></span>
<span class="line"><span style="color:#A6ACCD;">export const actions = {</span></span>
<span class="line"><span style="color:#89DDFF;">-</span><span style="color:#F07178;">	default: async (event) =&gt; {</span></span>
<span class="line"><span style="color:#89DDFF;">+</span><span style="color:#C3E88D;">	login: async (event) =&gt; {</span></span>
<span class="line"><span style="color:#A6ACCD;">		// TODO log the user in</span></span>
<span class="line"><span style="color:#A6ACCD;">	},</span></span>
<span class="line"><span style="color:#89DDFF;">+</span><span style="color:#C3E88D;">	register: async (event) =&gt; {</span></span>
<span class="line"><span style="color:#89DDFF;">+</span><span style="color:#C3E88D;">		// TODO register the user</span></span>
<span class="line"><span style="color:#89DDFF;">+</span><span style="color:#C3E88D;">	}</span></span>
<span class="line"><span style="color:#A6ACCD;">};</span></span>
<span class="line"></span></code></pre></div><p>To invoke a named action, add a query parameter with the name prefixed by a <code>/</code> character:</p><div class="language-svelte"><button class="copy"></button><span class="lang">svelte</span><pre><code><span class="line"><span style="color:#A6ACCD;">/// file: src/routes/login/+page.svelte</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">form</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">method</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">POST</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">action</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">?/register</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"></span></code></pre></div><div class="language-svelte"><button class="copy"></button><span class="lang">svelte</span><pre><code><span class="line"><span style="color:#A6ACCD;">/// file: src/routes/+layout.svelte</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">form</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">method</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">POST</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">action</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">/login?/register</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"></span></code></pre></div><p>As well as the <code>action</code> attribute, we can use the <code>formaction</code> attribute on a button to <code>POST</code> the same form data to a different action than the parent <code>&lt;form&gt;</code>:</p><div class="language-diff"><button class="copy"></button><span class="lang">diff</span><pre><code><span class="line"><span style="color:#A6ACCD;">/// file: src/routes/login/+page.svelte</span></span>
<span class="line"><span style="color:#89DDFF;">-</span><span style="color:#F07178;">&lt;form method=&quot;POST&quot;&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">+</span><span style="color:#C3E88D;">&lt;form method=&quot;POST&quot; action=&quot;?/login&quot;&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">	&lt;input name=&quot;email&quot; type=&quot;email&quot;&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">	&lt;input name=&quot;password&quot; type=&quot;password&quot;&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">	&lt;button&gt;Log in&lt;/button&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">+</span><span style="color:#C3E88D;">	&lt;button formaction=&quot;?/register&quot;&gt;Register&lt;/button&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">&lt;/form&gt;</span></span>
<span class="line"></span></code></pre></div><blockquote><p>We can&#39;t have default actions next to named actions, because if you POST to a named action without a redirect, the query parameter is persisted in the URL, which means the next default POST would go through the named action from before.</p></blockquote><h3 id="anatomy-of-an-action" tabindex="-1">Anatomy of an action <a class="header-anchor" href="#anatomy-of-an-action" aria-hidden="true">#</a></h3><p>Each action receives a <code>RequestEvent</code> object, allowing you to read the data with <code>request.formData()</code>. After processing the request (for example, logging the user in by setting a cookie), the action can respond with data that will be available through the <code>form</code> property on the corresponding page and through <code>$page.form</code> app-wide until the next update.</p><div class="language-js"><button class="copy"></button><span class="lang">js</span><pre><code><span class="line"><span style="color:#676E95;">// @errors: 2339 2304</span></span>
<span class="line"><span style="color:#676E95;">/// file: src/routes/login/+page.server.js</span></span>
<span class="line"><span style="color:#676E95;">/** </span><span style="color:#89DDFF;">@</span><span style="color:#C792EA;">type</span><span style="color:#676E95;"> </span><span style="color:#89DDFF;">{</span><span style="color:#FFCB6B;">import(&#39;./$types&#39;).Actions</span><span style="color:#89DDFF;">}</span><span style="color:#676E95;"> */</span></span>
<span class="line"><span style="color:#89DDFF;">export</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> actions </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#82AAFF;">login</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">async</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">({</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;">cookies</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;">request</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">})</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">		</span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">data</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">await</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">request</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">formData</span><span style="color:#F07178;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">		</span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">email</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">data</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">get</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">email</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">		</span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">password</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">data</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">get</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">password</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;">		</span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">user</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">await</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">db</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">getUser</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">email</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">		</span><span style="color:#A6ACCD;">cookies</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">set</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">sessionid</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">await</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">db</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">createSession</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">user</span><span style="color:#F07178;">))</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;">		</span><span style="color:#89DDFF;">return</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> success</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#FF9CAC;">true</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">};</span></span>
<span class="line"><span style="color:#F07178;">	</span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#82AAFF;">register</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">async</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">event</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">		</span><span style="color:#676E95;">// TODO register the user</span></span>
<span class="line"><span style="color:#F07178;">	</span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">};</span></span>
<span class="line"></span></code></pre></div><div class="language-svelte"><button class="copy"></button><span class="lang">svelte</span><pre><code><span class="line"><span style="color:#A6ACCD;">/// file: src/routes/login/+page.svelte</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">script</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#676E95;">/** </span><span style="color:#89DDFF;">@</span><span style="color:#C792EA;">type</span><span style="color:#676E95;"> </span><span style="color:#89DDFF;">{</span><span style="color:#FFCB6B;">import(&#39;./</span><span style="color:#89DDFF;">$</span><span style="color:#FFCB6B;">types&#39;).PageData</span><span style="color:#89DDFF;">}</span><span style="color:#676E95;"> */</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#89DDFF;">export</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> data</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#676E95;">/** </span><span style="color:#89DDFF;">@</span><span style="color:#C792EA;">type</span><span style="color:#676E95;"> </span><span style="color:#89DDFF;">{</span><span style="color:#FFCB6B;">import(&#39;./</span><span style="color:#89DDFF;">$</span><span style="color:#FFCB6B;">types&#39;).ActionData</span><span style="color:#89DDFF;">}</span><span style="color:#676E95;"> */</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#89DDFF;">export</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> form</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">script</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">{#</span><span style="color:#89DDFF;">if</span><span style="color:#A6ACCD;"> form</span><span style="color:#89DDFF;">?.</span><span style="color:#A6ACCD;">success</span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#676E95;">&lt;!-- this message is ephemeral; it exists because the page was rendered in</span></span>
<span class="line"><span style="color:#676E95;">	       response to a form submission. it will vanish if the user reloads --&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">p</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;">Successfully logged in! Welcome back, </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;">data</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">user</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">name</span><span style="color:#89DDFF;">}&lt;/</span><span style="color:#F07178;">p</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">{/</span><span style="color:#89DDFF;">if</span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><h4 id="validation-errors" tabindex="-1">Validation errors <a class="header-anchor" href="#validation-errors" aria-hidden="true">#</a></h4><p>If the request couldn&#39;t be processed because of invalid data, you can return validation errors \u2014\xA0along with the previously submitted form values \u2014 back to the user so that they can try again. The <code>invalid</code> function lets you return an HTTP status code (typically 400, in the case of validation errors) along with the data:</p><div class="language-diff"><button class="copy"></button><span class="lang">diff</span><pre><code><span class="line"><span style="color:#A6ACCD;">// @errors: 2339 2304</span></span>
<span class="line"><span style="color:#A6ACCD;">/// file: src/routes/login/+page.server.js</span></span>
<span class="line"><span style="color:#89DDFF;">+</span><span style="color:#C3E88D;">import { invalid } from &#39;@sveltejs/kit&#39;;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">/** @type {import(&#39;./$types&#39;).Actions} */</span></span>
<span class="line"><span style="color:#A6ACCD;">export const actions = {</span></span>
<span class="line"><span style="color:#A6ACCD;">	login: async ({ cookies, request }) =&gt; {</span></span>
<span class="line"><span style="color:#A6ACCD;">		const data = await request.formData();</span></span>
<span class="line"><span style="color:#A6ACCD;">		const email = data.get(&#39;email&#39;);</span></span>
<span class="line"><span style="color:#A6ACCD;">		const password = data.get(&#39;password&#39;);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">+</span><span style="color:#C3E88D;">		if (!email) {</span></span>
<span class="line"><span style="color:#89DDFF;">+</span><span style="color:#C3E88D;">			return invalid(400, { email, missing: true });</span></span>
<span class="line"><span style="color:#89DDFF;">+</span><span style="color:#C3E88D;">		}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">		const user = await db.getUser(email);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">+</span><span style="color:#C3E88D;">		if (!user || user.password !== hash(password)) {</span></span>
<span class="line"><span style="color:#89DDFF;">+</span><span style="color:#C3E88D;">			return invalid(400, { email, incorrect: true });</span></span>
<span class="line"><span style="color:#89DDFF;">+</span><span style="color:#C3E88D;">		}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">		cookies.set(&#39;sessionid&#39;, await db.createSession(user));</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">		return { success: true };</span></span>
<span class="line"><span style="color:#A6ACCD;">	},</span></span>
<span class="line"><span style="color:#A6ACCD;">	register: async (event) =&gt; {</span></span>
<span class="line"><span style="color:#A6ACCD;">		// TODO register the user</span></span>
<span class="line"><span style="color:#A6ACCD;">	}</span></span>
<span class="line"><span style="color:#A6ACCD;">};</span></span>
<span class="line"></span></code></pre></div><blockquote><p>Note that as a precaution, we only return the email back to the page \u2014\xA0not the password.</p></blockquote><div class="language-diff"><button class="copy"></button><span class="lang">diff</span><pre><code><span class="line"><span style="color:#A6ACCD;">/// file: src/routes/login/+page.svelte</span></span>
<span class="line"><span style="color:#A6ACCD;">&lt;form method=&quot;POST&quot; action=&quot;?/login&quot;&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">-</span><span style="color:#F07178;">	&lt;input name=&quot;email&quot; type=&quot;email&quot;&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">+</span><span style="color:#C3E88D;">	{#if form?.missing}&lt;p class=&quot;error&quot;&gt;The email field is required&lt;/p&gt;{/if}</span></span>
<span class="line"><span style="color:#89DDFF;">+</span><span style="color:#C3E88D;">	{#if form?.incorrect}&lt;p class=&quot;error&quot;&gt;Invalid credentials!&lt;/p&gt;{/if}</span></span>
<span class="line"><span style="color:#89DDFF;">+</span><span style="color:#C3E88D;">	&lt;input name=&quot;email&quot; type=&quot;email&quot; value={form?.email ?? &#39;&#39;}&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">	&lt;input name=&quot;password&quot; type=&quot;password&quot;&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">	&lt;button&gt;Log in&lt;/button&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">	&lt;button formaction=&quot;?/register&quot;&gt;Register&lt;/button&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">&lt;/form&gt;</span></span>
<span class="line"></span></code></pre></div><p>The returned data must be serializable as JSON. Beyond that, the structure is entirely up to you. For example, if you had multiple forms on the page, you could distinguish which <code>&lt;form&gt;</code> the returned <code>form</code> data referred to with an <code>id</code> property or similar.</p><h4 id="redirects" tabindex="-1">Redirects <a class="header-anchor" href="#redirects" aria-hidden="true">#</a></h4><p>Redirects (and errors) work exactly the same as in <a href="/docs/load.html#redirects"><code>load</code></a>:</p><div class="language-diff"><button class="copy"></button><span class="lang">diff</span><pre><code><span class="line"><span style="color:#A6ACCD;">// @errors: 2339 2304</span></span>
<span class="line"><span style="color:#A6ACCD;">/// file: src/routes/login/+page.server.js</span></span>
<span class="line"><span style="color:#89DDFF;">+</span><span style="color:#C3E88D;">import { invalid, redirect } from &#39;@sveltejs/kit&#39;;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">/** @type {import(&#39;./$types&#39;).Actions} */</span></span>
<span class="line"><span style="color:#A6ACCD;">export const actions = {</span></span>
<span class="line"><span style="color:#89DDFF;">+</span><span style="color:#C3E88D;">	login: async ({ cookies, request, url }) =&gt; {</span></span>
<span class="line"><span style="color:#A6ACCD;">		const data = await request.formData();</span></span>
<span class="line"><span style="color:#A6ACCD;">		const email = data.get(&#39;email&#39;);</span></span>
<span class="line"><span style="color:#A6ACCD;">		const password = data.get(&#39;password&#39;);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">		const user = await db.getUser(email);</span></span>
<span class="line"><span style="color:#A6ACCD;">		if (!user) {</span></span>
<span class="line"><span style="color:#A6ACCD;">			return invalid(400, { email, missing: true });</span></span>
<span class="line"><span style="color:#A6ACCD;">		}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">		if (user.password !== hash(password)) {</span></span>
<span class="line"><span style="color:#A6ACCD;">			return invalid(400, { email, incorrect: true });</span></span>
<span class="line"><span style="color:#A6ACCD;">		}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">		cookies.set(&#39;sessionid&#39;, await db.createSession(user));</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">+</span><span style="color:#C3E88D;">		if (url.searchParams.has(&#39;redirectTo&#39;)) {</span></span>
<span class="line"><span style="color:#89DDFF;">+</span><span style="color:#C3E88D;">			throw redirect(303, url.searchParams.get(&#39;redirectTo&#39;));</span></span>
<span class="line"><span style="color:#89DDFF;">+</span><span style="color:#C3E88D;">		}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">		return { success: true };</span></span>
<span class="line"><span style="color:#A6ACCD;">	},</span></span>
<span class="line"><span style="color:#A6ACCD;">	register: async (event) =&gt; {</span></span>
<span class="line"><span style="color:#A6ACCD;">		// TODO register the user</span></span>
<span class="line"><span style="color:#A6ACCD;">	}</span></span>
<span class="line"><span style="color:#A6ACCD;">};</span></span>
<span class="line"></span></code></pre></div><h3 id="progressive-enhancement" tabindex="-1">Progressive enhancement <a class="header-anchor" href="#progressive-enhancement" aria-hidden="true">#</a></h3><p>In the preceding sections we built a <code>/login</code> action that <a href="https://kryogenix.org/code/browser/everyonehasjs.html" target="_blank" rel="noreferrer">works without client-side JavaScript</a> \u2014 not a <code>fetch</code> in sight. That&#39;s great, but when JavaScript <em>is</em> available we can progressively enhance our form interactions to provide a better user experience.</p><h4 id="use-enhance" tabindex="-1">use:enhance <a class="header-anchor" href="#use-enhance" aria-hidden="true">#</a></h4><p>The easiest way to progressively enhance a form is to add the <code>use:enhance</code> action:</p><div class="language-diff"><button class="copy"></button><span class="lang">diff</span><pre><code><span class="line"><span style="color:#A6ACCD;">/// file: src/routes/login/+page.svelte</span></span>
<span class="line"><span style="color:#A6ACCD;">&lt;script&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">+</span><span style="color:#C3E88D;">	import { enhance } from &#39;$app/forms&#39;;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">	/** @type {import(&#39;./$types&#39;).ActionData} */</span></span>
<span class="line"><span style="color:#A6ACCD;">	export let form;</span></span>
<span class="line"><span style="color:#A6ACCD;">&lt;/script&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">+</span><span style="color:#C3E88D;">&lt;form method=&quot;POST&quot; use:enhance&gt;</span></span>
<span class="line"></span></code></pre></div><blockquote><p>Yes, it&#39;s a little confusing that the <code>enhance</code> action and <code>&lt;form action&gt;</code> are both called &#39;action&#39;. These docs are action-packed. Sorry.</p></blockquote><p>Without an argument, <code>use:enhance</code> will emulate the browser-native behaviour, just without the full-page reloads. It will:</p><ul><li>update the <code>form</code> property, <code>$page.form</code> and <code>$page.status</code> on a successful or invalid response, but only if the action is on the same page you&#39;re submitting from. So for example if your form looks like <code>&lt;form action=&quot;/somewhere/else&quot; ..&gt;</code>, <code>form</code> and <code>$page</code> will <em>not</em> be updated. This is because in the native form submission case you would be redirected to the page the action is on.</li><li>invalidate all data using <code>invalidateAll</code> on a successful response</li><li>call <code>goto</code> on a redirect response</li><li>render the nearest <code>+error</code> boundary if an error occurs</li></ul><p>To customise the behaviour, you can provide a function that runs immediately before the form is submitted, and (optionally) returns a callback that runs with the <code>ActionResult</code>. Note that if you return a callback, the default behavior mentioned above is not triggered. To get it back, call <code>update</code>.</p><div class="language-svelte"><button class="copy"></button><span class="lang">svelte</span><pre><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">form</span></span>
<span class="line"><span style="color:#89DDFF;">	</span><span style="color:#C792EA;">method</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">POST</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#89DDFF;">	</span><span style="color:#89DDFF;">use</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;">enhance</span><span style="color:#89DDFF;">={({</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;">form</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;">data</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;">action</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;">cancel</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">})</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">		</span><span style="color:#676E95;">// \`form\` is the \`&lt;form&gt;\` element</span></span>
<span class="line"><span style="color:#89DDFF;">		</span><span style="color:#676E95;">// \`data\` is its \`FormData\` object</span></span>
<span class="line"><span style="color:#89DDFF;">		</span><span style="color:#676E95;">// \`action\` is the URL to which the form is posted</span></span>
<span class="line"><span style="color:#89DDFF;">		</span><span style="color:#676E95;">// \`cancel()\` will prevent the submission</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;">		</span><span style="color:#89DDFF;">return</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">async</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">({</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">result</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">update</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">})</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">			</span><span style="color:#676E95;">// \`result\` is an \`ActionResult\` object</span></span>
<span class="line"><span style="color:#89DDFF;">			</span><span style="color:#676E95;">// \`update\` is a function which triggers the logic that would be triggered if this callback wasn&#39;t set</span></span>
<span class="line"><span style="color:#F07178;">		</span><span style="color:#89DDFF;">};</span></span>
<span class="line"><span style="color:#F07178;">	</span><span style="color:#89DDFF;">}}</span></span>
<span class="line"><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"></span></code></pre></div><p>You can use these functions to show and hide loading UI, and so on.</p><h4 id="applyaction" tabindex="-1">applyAction <a class="header-anchor" href="#applyaction" aria-hidden="true">#</a></h4><p>If you provide your own callbacks, you may need to reproduce part of the default <code>use:enhance</code> behaviour, such as showing the nearest <code>+error</code> boundary. Most of the time, calling <code>update</code> passed to the callback is enough. If you need more customization you can do so with <code>applyAction</code>:</p><div class="language-diff"><button class="copy"></button><span class="lang">diff</span><pre><code><span class="line"><span style="color:#A6ACCD;">&lt;script&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">+</span><span style="color:#C3E88D;">	import { enhance, applyAction } from &#39;$app/forms&#39;;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">	/** @type {import(&#39;./$types&#39;).ActionData} */</span></span>
<span class="line"><span style="color:#A6ACCD;">	export let form;</span></span>
<span class="line"><span style="color:#A6ACCD;">&lt;/script&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">&lt;form</span></span>
<span class="line"><span style="color:#A6ACCD;">	method=&quot;POST&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;">	use:enhance={({ form, data, action, cancel }) =&gt; {</span></span>
<span class="line"><span style="color:#A6ACCD;">		// \`form\` is the \`&lt;form&gt;\` element</span></span>
<span class="line"><span style="color:#A6ACCD;">		// \`data\` is its \`FormData\` object</span></span>
<span class="line"><span style="color:#A6ACCD;">		// \`action\` is the URL to which the form is posted</span></span>
<span class="line"><span style="color:#A6ACCD;">		// \`cancel()\` will prevent the submission</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">		return async ({ result }) =&gt; {</span></span>
<span class="line"><span style="color:#A6ACCD;">			// \`result\` is an \`ActionResult\` object</span></span>
<span class="line"><span style="color:#89DDFF;">+</span><span style="color:#C3E88D;">			if (result.type === &#39;error&#39;) {</span></span>
<span class="line"><span style="color:#89DDFF;">+</span><span style="color:#C3E88D;">				await applyAction(result);</span></span>
<span class="line"><span style="color:#89DDFF;">+</span><span style="color:#C3E88D;">			}</span></span>
<span class="line"><span style="color:#A6ACCD;">		};</span></span>
<span class="line"><span style="color:#A6ACCD;">	}}</span></span>
<span class="line"><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"></span></code></pre></div><p>The behaviour of <code>applyAction(result)</code> depends on <code>result.type</code>:</p><ul><li><code>success</code>, <code>invalid</code> \u2014 sets <code>$page.status</code> to <code>result.status</code> and updates <code>form</code> and <code>$page.form</code> to <code>result.data</code> (regardless of where you are submitting from, in contrast to <code>update</code> from <code>enhance</code>)</li><li><code>redirect</code> \u2014 calls <code>goto(result.location)</code></li><li><code>error</code> \u2014 renders the nearest <code>+error</code> boundary with <code>result.error</code></li></ul><h4 id="custom-event-listener" tabindex="-1">Custom event listener <a class="header-anchor" href="#custom-event-listener" aria-hidden="true">#</a></h4><p>We can also implement progressive enhancement ourselves, without <code>use:enhance</code>, with a normal event listener on the <code>&lt;form&gt;</code>:</p><div class="language-svelte"><button class="copy"></button><span class="lang">svelte</span><pre><code><span class="line"><span style="color:#A6ACCD;">/// file: src/routes/login/+page.svelte</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">script</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#89DDFF;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">invalidateAll</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">goto</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;$</span><span style="color:#C3E88D;">app/navigation</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#89DDFF;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">applyAction</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;$</span><span style="color:#C3E88D;">app/forms</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#676E95;">/** </span><span style="color:#89DDFF;">@</span><span style="color:#C792EA;">type</span><span style="color:#676E95;"> </span><span style="color:#89DDFF;">{</span><span style="color:#FFCB6B;">import(&#39;./</span><span style="color:#89DDFF;">$</span><span style="color:#FFCB6B;">types&#39;).ActionData</span><span style="color:#89DDFF;">}</span><span style="color:#676E95;"> */</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#89DDFF;">export</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> form</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#676E95;">/** </span><span style="color:#89DDFF;">@</span><span style="color:#C792EA;">type</span><span style="color:#676E95;"> </span><span style="color:#89DDFF;">{</span><span style="color:#FFCB6B;">any</span><span style="color:#89DDFF;">}</span><span style="color:#676E95;"> */</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> error</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#C792EA;">async</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">handleSubmit</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">event</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">		</span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">data</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">new</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">FormData</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">this</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;">		</span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">response</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">await</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">fetch</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">action</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">			method</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">POST</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">			body</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">data</span></span>
<span class="line"><span style="color:#F07178;">		</span><span style="color:#89DDFF;">}</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;">		</span><span style="color:#676E95;">/** </span><span style="color:#89DDFF;">@</span><span style="color:#C792EA;">type</span><span style="color:#676E95;"> </span><span style="color:#89DDFF;">{</span><span style="color:#FFCB6B;">import(&#39;@sveltejs/kit&#39;).ActionResult</span><span style="color:#89DDFF;">}</span><span style="color:#676E95;"> */</span></span>
<span class="line"><span style="color:#F07178;">		</span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">result</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">await</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">response</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">json</span><span style="color:#F07178;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;">		</span><span style="color:#89DDFF;">if</span><span style="color:#F07178;"> (</span><span style="color:#A6ACCD;">result</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">type</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">===</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">success</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">			</span><span style="color:#676E95;">// re-run all \`load\` functions, following the successful update</span></span>
<span class="line"><span style="color:#F07178;">			</span><span style="color:#89DDFF;">await</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">invalidateAll</span><span style="color:#F07178;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">		</span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;">		</span><span style="color:#82AAFF;">applyAction</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">result</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">	</span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">script</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">form</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">method</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">POST</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;"> </span><span style="color:#89DDFF;">on</span><span style="color:#89DDFF;">:</span><span style="color:#FFCB6B;">submit</span><span style="color:#89DDFF;">|</span><span style="color:#82AAFF;">preventDefault</span><span style="color:#89DDFF;">={</span><span style="color:#A6ACCD;">handleSubmit</span><span style="color:#89DDFF;">}&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#676E95;">&lt;!-- content --&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">form</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"></span></code></pre></div><p>If you have a <code>+server.js</code> alongside your <code>+page.server.js</code>, <code>fetch</code> requests will be routed there by default. To <code>POST</code> to an action in <code>+page.server.js</code> instead, use the custom <code>x-sveltekit-action</code> header:</p><div class="language-diff"><button class="copy"></button><span class="lang">diff</span><pre><code><span class="line"><span style="color:#A6ACCD;">const response = await fetch(this.action, {</span></span>
<span class="line"><span style="color:#A6ACCD;">	method: &#39;POST&#39;,</span></span>
<span class="line"><span style="color:#A6ACCD;">	body: data,</span></span>
<span class="line"><span style="color:#89DDFF;">+</span><span style="color:#C3E88D;">	headers: {</span></span>
<span class="line"><span style="color:#89DDFF;">+</span><span style="color:#C3E88D;">		&#39;x-sveltekit-action&#39;: &#39;true&#39;</span></span>
<span class="line"><span style="color:#89DDFF;">+</span><span style="color:#C3E88D;">	}</span></span>
<span class="line"><span style="color:#A6ACCD;">});</span></span>
<span class="line"></span></code></pre></div><h3 id="alternatives" tabindex="-1">Alternatives <a class="header-anchor" href="#alternatives" aria-hidden="true">#</a></h3><p>Form actions are the preferred way to send data to the server, since they can be progressively enhanced, but you can also use <a href="/docs/routing.html#server"><code>+server.js</code></a> files to expose (for example) a JSON API.</p>`,56),p=[e];function t(c,r,i,y,D,F){return a(),n("div",null,p)}const C=s(o,[["render",t]]);export{A as __pageData,C as default};
